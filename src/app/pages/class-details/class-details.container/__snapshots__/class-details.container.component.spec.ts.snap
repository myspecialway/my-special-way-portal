// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClassDetailsContainerComponent should create 1`] = `
ClassDetailsContainerComponent {
  "apollo": Object {
    "watchQuery": [Function],
  },
  "classService": Object {
    "classById": [MockFunction],
    "update": [MockFunction],
  },
  "dialog": Object {
    "open": [MockFunction],
  },
  "locales": Object {
    "CREATEFAILED": "CLASS-DETAILS.CREATEFAILED",
    "CREATESUCCESS": "CLASS-DETAILS.CREATESUCCESS",
    "UPDATEFAILED": "CLASS-DETAILS.UPDATEFAILED",
    "UPDATESUCCESS": "CLASS-DETAILS.UPDATESUCCESS",
  },
  "mswSnackbar": Object {
    "displayTimedMessage": [MockFunction],
  },
  "route": Object {
    "params": Subject {
      "_isScalar": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parent": null,
          "_parents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parent": [Circular],
              "_parents": null,
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parent": null,
            "_parentSubscriber": [Circular],
            "_parents": null,
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    },
  },
  "router": Router {
    "activateRoutes": [MockFunction],
    "createUrlTree": [MockFunction],
    "dispose": [MockFunction],
    "executeScheduledNavigation": [MockFunction],
    "initialNavigation": [MockFunction],
    "isActive": [MockFunction],
    "navigate": [MockFunction],
    "navigateByUrl": [MockFunction],
    "ngOnDestroy": [MockFunction],
    "parseUrl": [MockFunction],
    "processNavigations": [MockFunction],
    "removeEmptyProps": [MockFunction],
    "resetConfig": [MockFunction],
    "resetRootComponentType": [MockFunction],
    "resetStateAndUrl": [MockFunction],
    "resetUrlToCurrentUrlTree": [MockFunction],
    "runNavigate": [MockFunction],
    "scheduleNavigation": [MockFunction],
    "serializeUrl": [MockFunction],
    "setUpLocationChangeListener": [MockFunction],
    "triggerEvent": [MockFunction],
  },
  "scheduleService": ScheduleService {
    "daysLabels": Array [
      "DAYS.SUNDAY",
      "DAYS.MONDAY",
      "DAYS.TUESDAY",
      "DAYS.WEDNESDAY",
      "DAYS.THURSDAY",
      "DAYS.FRIDAY",
    ],
    "grades": Object {
      "a": "GRADES.A",
      "b": "GRADES.B",
      "c": "GRADES.C",
      "d": "GRADES.D",
      "e": "GRADES.E",
      "f": "GRADES.F",
    },
    "hoursLabels": Array [
      "07:30 - 08:00",
      "08:00 - 08:50",
      "08:50 - 09:30",
      "09:30 - 10:00",
      "10:00 - 10:30",
      "10:30 - 11:15",
      "11:15 - 12:00",
      "12:00 - 12:45",
      "12:45 - 13:15",
      "13:15 - 13:45",
      "13:45 - 14:30",
      "14:30 - 15:15",
      "15:15 - 16:00",
      "16:00 - 16:30",
      "16:30 - 16:45",
    ],
  },
  "translate": DictionaryService {
    "translate": TranslateService {
      "_langs": Array [],
      "_onDefaultLangChange": EventEmitter {
        "__isAsync": false,
        "_isScalar": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "_onLangChange": EventEmitter {
        "__isAsync": false,
        "_isScalar": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "_onTranslationChange": EventEmitter {
        "__isAsync": false,
        "_isScalar": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "_translationRequests": Object {},
      "_translations": Object {},
      "compiler": TranslateFakeCompiler {},
      "currentLoader": TranslateCustomLoader {},
      "isolate": false,
      "missingTranslationHandler": FakeMissingTranslationHandler {},
      "parser": TranslateDefaultParser {
        "templateMatcher": /\\{\\{\\\\s\\?\\(\\[\\^\\{\\}\\\\s\\]\\*\\)\\\\s\\?\\}\\}/g,
      },
      "pending": false,
      "store": TranslateStore {
        "currentLang": undefined,
        "langs": Array [],
        "onDefaultLangChange": EventEmitter {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "onLangChange": EventEmitter {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "onTranslationChange": EventEmitter {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "translations": Object {},
      },
      "useDefaultLang": true,
    },
  },
}
`;
